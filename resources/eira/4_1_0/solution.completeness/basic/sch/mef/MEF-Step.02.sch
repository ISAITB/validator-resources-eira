<pattern xmlns="http://purl.oclc.org/dsdl/schematron" is-a="Step.02" id="MEF-Step.02">
	<!-- Tests -->
	<param name="EIRA-011" value="let $elementId := string(@identifier) return exists(/a:model/a:views/a:diagrams/a:view[string(a:name) = 'Legal view']//a:node[string(@elementRef) = $elementId])"/>
	<param name="EIRA-012" value="let $elementId := string(@identifier) return exists(/a:model/a:views/a:diagrams/a:view[string(a:name) = 'Organisational view']//a:node[string(@elementRef) = $elementId])"/>
	<param name="EIRA-013" value="let $elementId := string(@identifier) return exists(/a:model/a:views/a:diagrams/a:view[string(a:name) = 'Semantic view']//a:node[string(@elementRef) = $elementId])"/>
	<param name="EIRA-014" value="let $elementId := string(@identifier) return exists(/a:model/a:views/a:diagrams/a:view[string(a:name) = 'Technical view - application']//a:node[string(@elementRef) = $elementId])"/>
	<param name="EIRA-015" value="let $elementId := string(@identifier) return exists(/a:model/a:views/a:diagrams/a:view[string(a:name) = 'Technical view - infrastructure']//a:node[string(@elementRef) = $elementId])"/>
	<param name="EIRA-016" value="let $elementId := string(@identifier) return exists(/a:model/a:views/a:diagrams/a:view[string(a:name) = 'Architectural Principles view']//a:node[string(@elementRef) = $elementId])"/>
	<param name="EIRA-017" value="let $elementId := string(@identifier) return exists(/a:model/a:views/a:diagrams/a:view[string(a:name) = 'Technical view - application' or string(a:name) = 'Technical view - infrastructure']//a:node[string(@elementRef) = $elementId])"/>

	<!-- Parameters -->
	<param name="SBBName" value="normalize-space(substring-after(string(a:name), '&gt;&gt;'))"/>
	<param name="SBBDeclaredABBName" value="substring-after(normalize-space(substring-before(normalize-space(substring-after(string(a:name), '&lt;&lt;')), '&gt;&gt;')), 'eira:')"/>

	<!-- Contexts -->
	<param name="SBBsForLegalViewABBs" value="/a:model/a:elements/a:element[matches(string(a:name), '&lt;&lt;[ \t]*eira:.+[ \t]*&gt;&gt;.+') and (let $declaredAbbName := substring-after(normalize-space(substring-before(normalize-space(substring-after(string(a:name), '&lt;&lt;')), '&gt;&gt;')), 'eira:') return exists(document('eira/EIRA.xml')/a:model/a:elements/a:element[a:properties/a:property[@propertyDefinitionRef = string(document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'dct:type']/@identifier) and starts-with(string(a:value), 'eira:')] and string(a:name) = $declaredAbbName and (let $abbElementId := string(@identifier) return exists(document('eira/EIRA.xml')/a:model/a:organizations//a:item[string(a:label) = 'Legal View Concepts']/a:item[string(@identifierRef) = $abbElementId]))]))]"/>
	<param name="SBBsForOrganisationalViewABBs" value="/a:model/a:elements/a:element[matches(string(a:name), '&lt;&lt;[ \t]*eira:.+[ \t]*&gt;&gt;.+') and (let $declaredAbbName := substring-after(normalize-space(substring-before(normalize-space(substring-after(string(a:name), '&lt;&lt;')), '&gt;&gt;')), 'eira:') return exists(document('eira/EIRA.xml')/a:model/a:elements/a:element[a:properties/a:property[@propertyDefinitionRef = string(document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'dct:type']/@identifier) and starts-with(string(a:value), 'eira:')] and string(a:name) = $declaredAbbName and (let $abbElementId := string(@identifier) return exists(document('eira/EIRA.xml')/a:model/a:organizations//a:item[string(a:label) = 'Organisational View Concepts']/a:item[string(@identifierRef) = $abbElementId]))]))]"/>
	<param name="SBBsForSemanticViewABBs" value="/a:model/a:elements/a:element[matches(string(a:name), '&lt;&lt;[ \t]*eira:.+[ \t]*&gt;&gt;.+') and (let $declaredAbbName := substring-after(normalize-space(substring-before(normalize-space(substring-after(string(a:name), '&lt;&lt;')), '&gt;&gt;')), 'eira:') return exists(document('eira/EIRA.xml')/a:model/a:elements/a:element[a:properties/a:property[@propertyDefinitionRef = string(document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'dct:type']/@identifier) and starts-with(string(a:value), 'eira:')] and string(a:name) = $declaredAbbName and (let $abbElementId := string(@identifier) return exists(document('eira/EIRA.xml')/a:model/a:organizations//a:item[string(a:label) = 'Semantic View Concepts']/a:item[string(@identifierRef) = $abbElementId]))]))]"/>
	<param name="SBBsForTechAppViewABBs" value="/a:model/a:elements/a:element[matches(string(a:name), '&lt;&lt;[ \t]*eira:.+[ \t]*&gt;&gt;.+') and (let $declaredAbbName := substring-after(normalize-space(substring-before(normalize-space(substring-after(string(a:name), '&lt;&lt;')), '&gt;&gt;')), 'eira:') return (not($declaredAbbName = 'Technical Interoperability Specification' or $declaredAbbName = 'Technical Specification' or $declaredAbbName = 'Interoperability Specification' or $declaredAbbName = 'Solution Specification') and exists(document('eira/EIRA.xml')/a:model/a:elements/a:element[a:properties/a:property[@propertyDefinitionRef = string(document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'dct:type']/@identifier) and starts-with(string(a:value), 'eira:')] and string(a:name) = $declaredAbbName and (let $abbElementId := string(@identifier) return exists(document('eira/EIRA.xml')/a:model/a:organizations//a:item[string(a:label) = 'Technical View Concepts' or string(a:label) = 'Technical View - Application Concepts']/a:item[string(@identifierRef) = $abbElementId]))])))]"/>
	<param name="SBBsForTechInfraViewABBs" value="/a:model/a:elements/a:element[matches(string(a:name), '&lt;&lt;[ \t]*eira:.+[ \t]*&gt;&gt;.+') and (let $declaredAbbName := substring-after(normalize-space(substring-before(normalize-space(substring-after(string(a:name), '&lt;&lt;')), '&gt;&gt;')), 'eira:') return (not($declaredAbbName = 'Technical Interoperability Specification' or $declaredAbbName = 'Technical Specification' or $declaredAbbName = 'Interoperability Specification' or $declaredAbbName = 'Solution Specification') and exists(document('eira/EIRA.xml')/a:model/a:elements/a:element[a:properties/a:property[@propertyDefinitionRef = string(document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'dct:type']/@identifier) and starts-with(string(a:value), 'eira:')] and string(a:name) = $declaredAbbName and (let $abbElementId := string(@identifier) return exists(document('eira/EIRA.xml')/a:model/a:organizations//a:item[string(a:label) = 'Technical View - Infrastructure Concepts']/a:item[string(@identifierRef) = $abbElementId]))])))]"/>
	<param name="SBBsForIOPPrincipleViewABBs" value="/a:model/a:elements/a:element[matches(string(a:name), '&lt;&lt;[ \t]*eira:.+[ \t]*&gt;&gt;.+') and (let $declaredAbbName := substring-after(normalize-space(substring-before(normalize-space(substring-after(string(a:name), '&lt;&lt;')), '&gt;&gt;')), 'eira:') return exists(document('eira/EIRA.xml')/a:model/a:elements/a:element[a:properties/a:property[@propertyDefinitionRef = string(document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'dct:type']/@identifier) and starts-with(string(a:value), 'eira:')] and string(a:name) = $declaredAbbName and (let $abbElementId := string(@identifier) return exists(document('eira/EIRA.xml')/a:model/a:organizations//a:item[string(a:label) = 'Architectural Principles Concepts']/a:item[string(@identifierRef) = $abbElementId]))]))]"/>
	<param name="SBBsForTechViewABBs" value="/a:model/a:elements/a:element[matches(string(a:name), '&lt;&lt;[ \t]*eira:.+[ \t]*&gt;&gt;.+') and (let $declaredAbbName := substring-after(normalize-space(substring-before(normalize-space(substring-after(string(a:name), '&lt;&lt;')), '&gt;&gt;')), 'eira:') return ($declaredAbbName = 'Technical Interoperability Specification' or $declaredAbbName = 'Technical Specification' or $declaredAbbName = 'Interoperability Specification' or $declaredAbbName = 'Solution Specification'))]"/>

</pattern>
