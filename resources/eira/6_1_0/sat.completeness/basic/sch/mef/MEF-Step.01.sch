<pattern xmlns="http://purl.oclc.org/dsdl/schematron" is-a="Step.01" id="MEF-Step.01">
	<!-- Tests -->
	<param name="EIRA-001-01" value="(a:views/a:diagrams/a:view[./a:name = 'Legal view'])/count(.) = 1"/>
	<param name="EIRA-001-02" value="(a:views/a:diagrams/a:view[./a:name = 'Organisational view'])/count(.) = 1"/>
	<param name="EIRA-001-03" value="(a:views/a:diagrams/a:view[./a:name = 'Semantic view'])/count(.) = 1"/>
	<param name="EIRA-001-04" value="(a:views/a:diagrams/a:view[./a:name = 'Technical view - application'])/count(.) = 1"/>
	<param name="EIRA-001-05" value="(a:views/a:diagrams/a:view[./a:name = 'Technical view - infrastructure'])/count(.) = 1"/>

	<param name="EIRA-022" value="exists(a:elements/a:element/a:properties/a:property[@propertyDefinitionRef = /a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'eira:ABB']/@identifier and a:value = 'eira:InteroperabilityRequirementRequirement'])"/>
	<param name="EIRA-023" value="exists(a:elements/a:element/a:properties/a:property[@propertyDefinitionRef = /a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'eira:ABB']/@identifier and (a:value = 'eira:MachineToMachineInterfaceApplicationInterface' or a:value = 'eira:HumanInterfaceApplicationInterface')])"/>
	<param name="EIRA-024-01" value="exists(a:elements/a:element/a:properties/a:property[@propertyDefinitionRef = /a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'eira:ABB']/@identifier and a:value = 'eira:LegislationCatalogueBusinessObject'])"/>
	<param name="EIRA-024-02" value="exists(a:elements/a:element/a:properties/a:property[@propertyDefinitionRef = /a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'eira:ABB']/@identifier and a:value = 'eira:DigitalPublicServiceCatalogueBusinessObject'])"/>
	<param name="EIRA-024-03" value="exists(a:elements/a:element/a:properties/a:property[@propertyDefinitionRef = /a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'eira:ABB']/@identifier and a:value = 'eira:DatasetCatalogueDataObject'])"/>
	<param name="EIRA-024-04" value="exists(a:elements/a:element/a:properties/a:property[@propertyDefinitionRef = /a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'eira:ABB']/@identifier and a:value = 'eira:OntologiesCatalogueDataObject'])"/>
	<param name="EIRA-024-05" value="exists(a:elements/a:element/a:properties/a:property[@propertyDefinitionRef = /a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'eira:ABB']/@identifier and a:value = 'eira:ServiceDiscoveryAndRegistryApplicationService'])"/>
	<param name="EIRA-024-06" value="exists(a:elements/a:element/a:properties/a:property[@propertyDefinitionRef = /a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'eira:ABB']/@identifier and a:value = 'eira:APIDiscoveryAndCatalogueApplicationService'])"/>
	<param name="EIRA-024-07" value="exists(a:elements/a:element/a:properties/a:property[@propertyDefinitionRef = /a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'eira:ABB']/@identifier and a:value = 'eira:LegislationOnDataInformationAndKnowledgeExchangeBusinessObject'])"/>
	<param name="EIRA-024-08" value="exists(a:elements/a:element/a:properties/a:property[@propertyDefinitionRef = /a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'eira:ABB']/@identifier and a:value = 'eira:DigitalPublicServiceDeliveryModelBusinessCollaboration'])"/>
	<param name="EIRA-024-09" value="exists(a:elements/a:element/a:properties/a:property[@propertyDefinitionRef = /a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'eira:ABB']/@identifier and a:value = 'eira:DataMappingDataObject'])"/>
	<param name="EIRA-024-10" value="exists(a:elements/a:element/a:properties/a:property[@propertyDefinitionRef = /a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'eira:ABB']/@identifier and a:value = 'eira:LegalInteroperabilityAgreementContract'])"/>
	<param name="EIRA-024-11" value="exists(a:elements/a:element/a:properties/a:property[@propertyDefinitionRef = /a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'eira:ABB']/@identifier and a:value = 'eira:OrganisationalInteroperabilityAgreementContract'])"/>
	<param name="EIRA-024-12" value="exists(a:elements/a:element/a:properties/a:property[@propertyDefinitionRef = /a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'eira:ABB']/@identifier and a:value = 'eira:SemanticInteroperabilityAgreementContract'])"/>
	<param name="EIRA-024-13" value="exists(a:elements/a:element/a:properties/a:property[@propertyDefinitionRef = /a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'eira:ABB']/@identifier and a:value = 'eira:TechnicalInteroperabilityAgreementContract'])"/>
	<param name="EIRA-036" value="exists(a:elements/a:element/a:properties/a:property[@propertyDefinitionRef = /a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'eira:ABB']/@identifier and a:value = 'eira:InteroperabilitySpecificationContract'])"/>

	<param name="EIRA-003" value="every $relatedABB in a:properties/a:property[@propertyDefinitionRef = /a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'eira:ABB']/@identifier]/a:value, $elementType in @xsi:type satisfies (let $relatedEIRAABB := $EIRAABB[a:properties/a:property[@propertyDefinitionRef = document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'dct:type']/@identifier and a:value = $relatedABB]] return ($relatedEIRAABB/@xsi:type = $elementType or not(exists($relatedEIRAABB))))"/>
	<param name="EIRA-004" value="let $relatedABB := a:properties/a:property[@propertyDefinitionRef = /a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'eira:ABB']/@identifier]/a:value return exists($EIRAABB[a:properties/a:property[@propertyDefinitionRef = document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'dct:type']/@identifier and a:value = $relatedABB]])"/>
	<param name="EIRA-006" value="let $relatedABB := a:properties/a:property[@propertyDefinitionRef = /a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'eira:ABB']/@identifier]/a:value return (let $relatedEIRAABB := document('eira/EIRA.xml')/a:model/a:elements/a:element[a:properties/a:property[@propertyDefinitionRef = document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'dct:type']/@identifier]/a:value = $relatedABB] return not(exists($relatedEIRAABB/a:properties/a:property[@propertyDefinitionRef = document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'adms:status']/@identifier and a:value = 'deprecated'])))"/>
	<param name="EIRA-025" value="not(exists(a:properties/a:property[@propertyDefinitionRef = /a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'eira:ABB']/@identifier and a:value = 'eira:InteroperabilitySpecificationContract']))"/>


	<param name="EIRA-008" value="every $abbPuri in a:properties/a:property[@propertyDefinitionRef = $PropertyDefinition[a:name = 'eira:PURI']/@identifier]/a:value, $elementType in @xsi:type satisfies ($EIRAABB[a:properties/a:property[@propertyDefinitionRef = $EIRAPropertyDefinition[a:name = 'eira:PURI'] and a:value = $abbPuri]]/@xsi:type = $elementType)"/>
	<param name="EIRA-009" value="let $propValue := a:value return (let $propID := @propertyDefinitionRef return (let $propertyName := /a:model/a:propertyDefinitions/a:propertyDefinition[@identifier = $propID]/a:name return (matches($propertyName, '(ID|eira:synonym)') or (let $relatedABB := ../a:property[@propertyDefinitionRef = /a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'eira:ABB']/@identifier]/a:value return (let $abbPropDefinition := (normalize-space(replace(string((document('eira/EIRA.xml')/a:model/a:elements/a:element[a:properties/a:property[@propertyDefinitionRef = document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'dct:type']/@identifier and a:value = $relatedABB]]/a:properties/a:property[(let $abbPropId := @propertyDefinitionRef return (exists(document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition[@identifier = $abbPropId and a:name = $propertyName])))]/a:value)[1]), '[\-\)\(]', '~'))) return (if (matches($abbPropDefinition, '\[[\w\d\s%~,\.\|]*[\w\d\s,\.%~]\]')) then let $validTokens := tokenize(substring-before(substring-after($abbPropDefinition, '['), ']'), '([ ]*\|[ ]*)|(^[ ]+)|([ ]+$)') return (index-of($validTokens, replace($propValue, '[\-\)\(]', '~')) > 0) else if ($abbPropDefinition != '') then normalize-space(replace($propValue, '[\-\)\(]', '~')) = $abbPropDefinition else true()))))))"/>
	
	<!-- Parameters -->
	<param name="SBBDeclaredABBElementType" value="let $relatedABB := a:properties/a:property[@propertyDefinitionRef = /a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'eira:ABB']/@identifier]/a:value return ($EIRAABB[a:properties/a:property[@propertyDefinitionRef = document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'dct:type']/@identifier and a:value = $relatedABB]]/@xsi:type)"/>
	<param name="SBBDeclaredABB" value="a:properties/a:property[@propertyDefinitionRef = /a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'eira:ABB']/@identifier]/a:value"/>
	<param name="EIRAABBElementType" value="let $abbPuri := a:properties/a:property[@propertyDefinitionRef = /a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'eira:PURI']/@identifier]/a:value return ($EIRAABB[a:properties/a:property[@propertyDefinitionRef = $EIRAPropertyDefinition[a:name = 'eira:PURI']/@identifier and a:value = $abbPuri]]/@xsi:type)"/>
	<param name="ABBExpectedPropertyValue" value="let $pIdentifier := @propertyDefinitionRef return (let $propertyName := /a:model/a:propertyDefinitions/a:propertyDefinition[string(./@identifier) = $pIdentifier]/a:name return (let $relatedABB := ../a:property[@propertyDefinitionRef = /a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'eira:ABB']/@identifier]/a:value return ((document('eira/EIRA.xml')/a:model/a:elements/a:element[a:properties/a:property[@propertyDefinitionRef = document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'dct:type']/@identifier and a:value = $relatedABB]]/a:properties/a:property[(let $abbPropId := /@propertyDefinitionRef return (exists(document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition[/@identifier = $abbPropId and ./a:name = $propertyName])))]/a:value)[1])))"/>
	<param name="SBBPropertyDeclaredABBName" value="../a:property[@propertyDefinitionRef = /a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'eira:ABB']/@identifier]/a:value"/>
	<param name="SBBPropertyName" value="let $propID := @propertyDefinitionRef return (/a:model/a:propertyDefinitions/a:propertyDefinition[@identifier = $propID]/a:name)"/>
	<param name="SBBPropertySBBName" value="../../a:name"/>
	<param name="SBBPropertyValue" value="a:value"/>
	<param name="ElementName" value="a:name"/>
	<param name="ElementType" value="@xsi:type"/>

	
	<param name="PropertyDefinition" value="/a:model/a:propertyDefinitions/a:propertyDefinition"/>
	<param name="EIRAPropertyDefinition" value="document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition"/>
	<param name="EIRAABB" value="document('eira/EIRA.xml')/a:model/a:elements/a:element[a:properties/a:property[@propertyDefinitionRef = document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'eira:concept']/@identifier and a:value = 'eira:ArchitectureBuildingBlock']]"/>

	<!-- Contexts -->
	<param name="Model" value="/a:model"/>
	<param name="SBBPropertyDefinedInEIRA" value="$SolutionBuildingBlock/a:properties/a:property[let $propID := @propertyDefinitionRef return (let $propertyName := /a:model/a:propertyDefinitions/a:propertyDefinition[@identifier = $propID]/a:name return (let $relatedABB := ../a:property[@propertyDefinitionRef = /a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'eira:ABB']/@identifier]/a:value return exists(document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition[a:name = $propertyName and (let $abbPropID := @identifier return exists(document('eira/EIRA.xml')/a:model/a:elements/a:element[a:properties/a:property[@propertyDefinitionRef = document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'dct:type']/@identifier and a:value = $relatedABB]]/a:properties/a:property[@propertyDefinitionRef = $abbPropID]))])))]"/>
	<param name="SolutionBuildingBlock" value="/a:model/a:elements/a:element[a:properties/a:property[@propertyDefinitionRef = /a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'eira:concept']/@identifier and a:value = 'eira:SolutionBuildingBlock']]"/>
	<param name="ArchitectureBuildingBlock" value="/a:model/a:elements/a:element[a:properties/a:property[@propertyDefinitionRef = /a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'eira:concept']/@identifier and a:value = 'eira:ArchitectureBuildingBlock']]"/>
</pattern>
