<pattern xmlns="http://purl.oclc.org/dsdl/schematron" is-a="Step.01" id="MEF-Step.01">
	<!-- Tests -->
	<param name="EIRA-001-01" value="(a:views/a:diagrams/a:view[a:name = 'Legal view'])/count(.) = 1"/>
	<param name="EIRA-001-02" value="(a:views/a:diagrams/a:view[a:name = 'Organisational view'])/count(.) = 1"/>
	<param name="EIRA-001-03" value="(a:views/a:diagrams/a:view[a:name = 'Semantic view'])/count(.) = 1"/>
	<param name="EIRA-001-04" value="(a:views/a:diagrams/a:view[a:name = 'Technical view - application'])/count(.) = 1"/>
	<param name="EIRA-001-05" value="(a:views/a:diagrams/a:view[a:name = 'Technical view - infrastructure'])/count(.) = 1"/>
	<param name="EIRA-001-06" value="(a:views/a:diagrams/a:view[a:name = 'Highlevel viewpoint'])/count(.) = 1"/>
	<!--<param name="EIRA-002" value="let $modelAttributes := a:properties return (every $eiraModelAttributeName in $EIRAPropertyDefinitions[(let $propId := @identifier return exists(document('eira/EIRA.xml')/a:model/a:properties/a:property[@propertyDefinitionRef = $propId]))]/a:name/string(.) satisfies (($eiraModelAttributeName = 'ID' or $eiraModelAttributeName = 'dct:description' or $eiraModelAttributeName = 'iop_score_governance' or $eiraModelAttributeName = 'eira:iop_score_h2m' or $eiraModelAttributeName = 'eira:iop_score_m2m' or $eiraModelAttributeName = 'eira:iop_score_overall' or $eiraModelAttributeName = 'eira:iop_score_sw_architecture' or $eiraModelAttributeName = 'dcat:landingPage' or $eiraModelAttributeName = 'eira:actual_use' or $eiraModelAttributeName = 'eira:actual_reuse') or exists($modelAttributes/a:property[(let $modelPropId := string(@propertyDefinitionRef) return exists(/a:model/a:propertyDefinitions/a:propertyDefinition[string(@identifier) = $modelPropId and string(a:name) = $eiraModelAttributeName])) and normalize-space(string(./a:value)) != ''])))"/>-->
	
	<param name="EIRA-003" value="every $relatedABB in a:properties/a:property[@propertyDefinitionRef = $PropertyDefinitions[a:name = 'eira:ABB']/@identifier]/a:value, $elementType in @xsi:type satisfies (let $relatedEIRAABB := $EIRAABB[a:properties/a:property[@propertyDefinitionRef = $EIRAPropertyDefinitions[a:name = 'dct:type']/@identifier and a:value = $relatedABB]] return ($relatedEIRAABB/@xsi:type = $elementType or not(exists($relatedEIRAABB))))"/>
	<param name="EIRA-004" value="let $relatedABB := a:properties/a:property[@propertyDefinitionRef = $PropertyDefinitions[a:name = 'eira:ABB']/@identifier]/a:value return exists($EIRAABB[a:properties/a:property[@propertyDefinitionRef = $EIRAPropertyDefinitions[a:name = 'dct:type']/@identifier and a:value = $relatedABB]])"/>
	<param name="EIRA-006" value="let $relatedABB := a:properties/a:property[@propertyDefinitionRef = $PropertyDefinitions[a:name = 'eira:ABB']/@identifier]/a:value return (let $relatedEIRAABB := document('eira/EIRA.xml')/a:model/a:elements/a:element[a:properties/a:property[@propertyDefinitionRef = $EIRAPropertyDefinitions[a:name = 'dct:type']/@identifier]/a:value = $relatedABB] return not(exists($relatedEIRAABB/a:properties/a:property[@propertyDefinitionRef = $EIRAPropertyDefinitions[a:name = 'adms:status']/@identifier and a:value = 'deprecated'])))"/>
	
	<param name="EIRA-008" value="every $abbPuri in a:properties/a:property[@propertyDefinitionRef = $PropertyDefinitions[a:name = 'eira:PURI']/@identifier]/a:value, $elementType in @xsi:type satisfies ($EIRAABB[a:properties/a:property[@propertyDefinitionRef = document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'eira:PURI']/@identifier and a:value = $abbPuri]]/@xsi:type = $elementType)"/>
	
	<!-- Contexts -->
	<param name="Model" value="/a:model"/>
	<!--<param name="SBBPropertyDefinedInEIRA" value="$SolutionBuildingBlock/a:properties/a:property[let $propID := @propertyDefinitionRef return (let $propertyName := /a:model/a:propertyDefinitions/a:propertyDefinition[@identifier = $propID]/a:name return (let $relatedABB := ../a:property[@propertyDefinitionRef = /a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'eira:ABB']/@identifier]/a:value return exists(document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition[a:name = $propertyName and (let $abbPropID := @identifier return exists(document('eira/EIRA.xml')/a:model/a:elements/a:element[a:properties/a:property[@propertyDefinitionRef = document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'dct:type']/@identifier and a:value = $relatedABB]]/a:properties/a:property[@propertyDefinitionRef = $abbPropID]))])))]"/>-->
	<param name="SolutionBuildingBlock" value="/a:model/a:elements/a:element[a:properties/a:property[@propertyDefinitionRef = /a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'eira:concept']/@identifier and a:value = 'eira:SolutionBuildingBlock']]"/>
	<param name="ArchitectureBuildingBlock" value="/a:model/a:elements/a:element[a:properties/a:property[@propertyDefinitionRef = /a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'eira:concept']/@identifier and a:value = 'eira:ArchitectureBuildingBlock']]"/>

	<!-- Parameters -->
	<!--
	<param name="MissingSBBAttributeNames" value="let $sbbProperties := a:properties return (let $sbbPropertyDefinitions := /a:model/a:propertyDefinitions return (let $abbName := string(./a:name) return (document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition[not(string(./a:name) = 'ID' or string(./a:name) = 'eira:ABB_Status' or string(./a:name) = 'eira:synonym' or string(./a:name) = 'eira:unit_in_DG' or string(./a:name) = 'dct:references' or string(./a:name) = 'eira:reuse_status' or string(./a:name) = 'eira:specific_policy_issue' or string(./a:name) = 'eira:operational_date' or string(./a:name) = 'dct:description' or string(./a:name) = 'eira:policy_area' or string(./a:name) = 'eira:owner' or string(./a:name) = 'eira:description' or string(./a:name) = 'eira:reusability_score' or string(./a:name) = 'eira:data_quality_level' or string(./a:name) = 'eira:data_quality_score' or string(./a:name) = 'eira:iop_level' or string(./a:name) = 'eira:iop_score' or string(./a:name) = 'eira:GovIS_ID' or string(./a:name) = 'eira:IES_category' or string(./a:name) = 'eira:importance_for_the_functioning_of_the_EU' or string(./a:name) = 'eira:actual_use' or string(./a:name) = 'eira:actual_reuse' or string(./a:name) = 'eira:view') and (let $propId := string(./@identifier) return (let $propName := string(./a:name) return (exists(document('eira/EIRA.xml')/a:model/a:elements/a:element[string(./a:name) = $abbName]/a:properties/a:property[string(./@propertyDefinitionRef) = $propId and not(exists($sbbPropertyDefinitions/a:propertyDefinition[(let $modelPropId := string(./@identifier) return exists($sbbProperties/a:property[string(./@propertyDefinitionRef) = $modelPropId and normalize-space(string(./a:value)) != ''])) and string(./a:name) = $propName]))]))))])))/a:name/string(.)"/>
	<param name="MissingModelAttributeNames" value="let $modelProperties := a:properties return (let $modelPropertyDefinitions := /a:model/a:propertyDefinitions return (document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition[not(string(./a:name) = 'ID' or string(./a:name) = 'dct:description' or string(./a:name) = 'iop_score_governance' or string(./a:name) = 'eira:iop_score_h2m' or string(./a:name) = 'eira:iop_score_m2m' or string(./a:name) = 'eira:iop_score_overall' or string(./a:name) = 'eira:iop_score_sw_architecture' or string(./a:name) = 'dcat:landingPage' or string(./a:name) = 'eira:actual_use' or string(./a:name) = 'eira:actual_reuse') and (let $propId := string(./@identifier) return (let $propName := string(./a:name) return (exists(document('eira/EIRA.xml')/a:model/a:properties/a:property[string(./@propertyDefinitionRef) = $propId and not(exists($modelPropertyDefinitions/a:propertyDefinition[(let $modelPropId := string(./@identifier) return exists($modelProperties/a:property[string(./@propertyDefinitionRef) = $modelPropId and normalize-space(string(./a:value)) != ''])) and string(./a:name) = $propName]))]))))]))/a:name/string(.)"/>
	-->
	<param name="ElementName" value="a:name"/>
	<param name="ElementType" value="@xsi:type"/>
	<param name="EIRAABBElementType" value="let $abbPuri := a:properties/a:property[@propertyDefinitionRef = $PropertyDefinitions[a:name = 'eira:PURI']/@identifier]/a:value return ($EIRAABB[a:properties/a:property[@propertyDefinitionRef = $EIRAPropertyDefinitions[a:name = 'eira:PURI']/@identifier and a:value = $abbPuri]]/@xsi:type)"/>

	<param name="SBBPropertyValue" value="a:value"/>
	<param name="SBBPropertySBBName" value="../../a:name"/>
	<param name="SBBPropertyName" value="let $propID := @propertyDefinitionRef return ($PropertyDefinitions[@identifier = $propID]/a:name)"/>
	<param name="SBBPropertyDeclaredABBName" value="../a:property[@propertyDefinitionRef = $PropertyDefinitions[a:name = 'eira:ABB']/@identifier]/a:value"/>
	<param name="ABBExpectedPropertyValue" value="let $pIdentifier := @propertyDefinitionRef return (let $propertyName := $PropertyDefinitions[@identifier = $pIdentifier]/a:name return (let $relatedABB := ../a:property[@propertyDefinitionRef = $PropertyDefinitions[a:name = 'eira:ABB']/@identifier]/a:value return ((document('eira/EIRA.xml')/a:model/a:elements/a:element[a:properties/a:property[@propertyDefinitionRef = $EIRAPropertyDefinitions[a:name = 'dct:type']/@identifier and a:value = $relatedABB]]/a:properties/a:property[(let $abbPropId := @propertyDefinitionRef return (exists($EIRAPropertyDefinitions[@identifier = $abbPropId and a:name = $propertyName])))]/a:value)[1])))"/>
	
	<param name="SBBDeclaredABB" value="a:properties/a:property[@propertyDefinitionRef = $PropertyDefinitions[a:name = 'eira:ABB']/@identifier]/a:value"/>
	<param name="SBBDeclaredABBElementType" value="let $relatedABB := a:properties/a:property[@propertyDefinitionRef = $PropertyDefinitions[a:name = 'eira:ABB']/@identifier]/a:value return ($EIRAABB[a:properties/a:property[@propertyDefinitionRef = $EIRAPropertyDefinitions[a:name = 'dct:type']/@identifier and a:value = $relatedABB]]/@xsi:type)"/>
	<param name="SBB" value="/a:model/a:elements/a:element[a:properties/a:property[@propertyDefinitionRef = $PropertyDefinitions[a:name = 'eira:concept']/@identifier and a:value = 'eira:SolutionBuildingBlock']]"/>
	<param name="ABB" value="/a:model/a:elements/a:element[a:properties/a:property[@propertyDefinitionRef = $PropertyDefinitions[a:name = 'eira:concept']/@identifier and a:value = 'eira:ArchitectureBuildingBlock']]"/>
	<param name="EIRAABB" value="document('eira/EIRA.xml')/a:model/a:elements/a:element[a:properties/a:property[@propertyDefinitionRef = $EIRAPropertyDefinitions[a:name = 'eira:concept']/@identifier and a:value = 'eira:ArchitectureBuildingBlock']]"/>
	<param name="PropertyDefinitions" value="/a:model/a:propertyDefinitions/a:propertyDefinition"/>
	<param name="EIRAPropertyDefinitions" value="document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition"/>
</pattern>
