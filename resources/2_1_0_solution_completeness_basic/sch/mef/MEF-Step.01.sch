<pattern xmlns="http://purl.oclc.org/dsdl/schematron" is-a="Step.01" id="MEF-Step.01">
	<!-- Tests -->
	<param name="EIRA-001" value="(a:views/a:diagrams/a:view[./a:name = 'Legal view'])/count(.) = 1"/>
	<param name="EIRA-002" value="(a:views/a:diagrams/a:view[./a:name = 'Organisational view'])/count(.) = 1"/>
	<param name="EIRA-003" value="(a:views/a:diagrams/a:view[./a:name = 'Semantic view'])/count(.) = 1"/>
	<param name="EIRA-004" value="(a:views/a:diagrams/a:view[./a:name = 'Technical view - application'])/count(.) = 1"/>
	<param name="EIRA-005" value="(a:views/a:diagrams/a:view[./a:name = 'Technical view - infrastructure'])/count(.) = 1"/>
	<param name="EIRA-006" value="(a:views/a:diagrams/a:view[./a:name = 'Highlevel viewpoint'])/count(.) = 1"/>
	<param name="EIRA-007" value="let $modelAttributes := (a:properties) return (every $eiraModelAttributeName in document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition[(let $propId := string(@identifier) return exists(document('eira/EIRA.xml')/a:model/a:properties/a:property[string(@propertyDefinitionRef) = $propId]))]/a:name/string(.) satisfies (($eiraModelAttributeName = 'ID' or $eiraModelAttributeName = 'dct:description' or $eiraModelAttributeName = 'eira:iop_score_governance' or $eiraModelAttributeName = 'eira:iop_score_h2m' or $eiraModelAttributeName = 'eira:iop_score_m2m' or $eiraModelAttributeName = 'eira:iop_score_overall' or $eiraModelAttributeName = 'eira:iop_score_sw_architecture' or $eiraModelAttributeName = 'dcat:landingPage') or exists($modelAttributes/a:property[(let $modelPropId := string(@propertyDefinitionRef) return exists(/a:model/a:propertyDefinitions/a:propertyDefinition[string(@identifier) = $modelPropId and string(a:name) = $eiraModelAttributeName])) and normalize-space(string(./a:value)) != ''])))"/>
	<param name="EIRA-008" value="every $sbbDeclaredAbbName in normalize-space(substring-before(normalize-space(substring-after(string(a:name), '&lt;&lt;')), '&gt;&gt;')), $elementType in string(@xsi:type) satisfies (let $abb := document('eira/EIRA.xml')/a:model/a:elements/a:element[a:properties/a:property[@propertyDefinitionRef = string(document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'dct:type']/@identifier)] and string(a:name) = $sbbDeclaredAbbName] return not(exists($abb)) or $abb/@xsi:type = $elementType)"/>
	<param name="EIRA-009" value="let $sbbName := normalize-space(substring-before(normalize-space(substring-after(string(a:name), '&lt;&lt;')), '&gt;&gt;')) return exists(document('eira/EIRA.xml')/a:model/a:elements/a:element[string(a:name) = $sbbName])"/>
	<param name="EIRA-010" value="let $abbName := normalize-space(substring-before(normalize-space(substring-after(string(a:name), '&lt;&lt;')), '&gt;&gt;')) return (let $sbbAttributes := a:properties return (every $abbAttributeName in document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition[(let $propId := string(@identifier) return exists(document('eira/EIRA.xml')/a:model/a:elements/a:element[string(a:name) = $abbName]/a:properties/a:property[string(@propertyDefinitionRef) = $propId]))]/a:name/string(.) satisfies (($abbAttributeName = 'ID' or $abbAttributeName = 'eira:ABB_Status' or $abbAttributeName = 'eira:synonym' or $abbAttributeName = 'eira:unit_in_DG' or $abbAttributeName = 'dct:references' or $abbAttributeName = 'eira:reuse_status' or $abbAttributeName = 'eira:specific_policy_issue' or $abbAttributeName = 'eira:operational_date' or $abbAttributeName = 'eira:iop_score_governance' or $abbAttributeName = 'eira:iop_score_h2m' or $abbAttributeName = 'eira:iop_score_m2m' or $abbAttributeName = 'eira:iop_score_overall' or $abbAttributeName = 'eira:iop_score_sw_architecture' or $abbAttributeName = 'dct:description') or exists($sbbAttributes/a:property[(let $ssbPropId := string(@propertyDefinitionRef) return exists(/a:model/a:propertyDefinitions/a:propertyDefinition[string(@identifier) = $ssbPropId and string(a:name) = $abbAttributeName])) and normalize-space(string(./a:value)) != '']))))"/>
	<param name="EIRA-011" value="let $sbbName := normalize-space(substring-before(normalize-space(substring-after(string(a:name), '&lt;&lt;')), '&gt;&gt;')) return (let $abb := document('eira/EIRA.xml')/a:model/a:elements/a:element[string(a:name) = $sbbName] return (not(exists($abb)) or not(exists($abb/a:properties/a:property[string(./a:value) = 'Obsolete' and string(./@propertyDefinitionRef) = string(document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition[string(./a:name) = 'eira:ABB_Status']/@identifier)]))))"/>
	<param name="EIRA-012" value="false()"/>
	<param name="EIRA-013" value="every $elementName in string(a:name), $elementType in string(@xsi:type) satisfies ($elementType = string(document('eira/EIRA.xml')/a:model/a:elements/a:element[a:properties/a:property[@propertyDefinitionRef = string(document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'dct:type']/@identifier)] and string(a:name) = $elementName]/@xsi:type))"/>
	<param name="EIRA-014" value="let $pValue := normalize-space(string(a:value)) return (let $pIdentifier := string(@propertyDefinitionRef) return (let $propertyName := string(/a:model/a:propertyDefinitions/a:propertyDefinition[string(./@identifier) = $pIdentifier]/a:name) return (($propertyName = 'ID') or (let $abbName := normalize-space(substring-before(normalize-space(substring-after(string(../../a:name), '&lt;&lt;')), '&gt;&gt;')) return (let $abbPropDefinition := (replace(string(document('eira/EIRA.xml')/a:model/a:elements/a:element[string(./a:name) = $abbName]/a:properties/a:property[(let $abbPropId := string(./@propertyDefinitionRef) return (exists(document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition[string(./@identifier) = $abbPropId and string(./a:name) = $propertyName])))]/a:value), '\-', '~')) return (if (matches($abbPropDefinition, '\[(([\w\d\s\|]+)|([\w\d\s]+))\]')) then let $validTokens := tokenize(substring-before(substring-after($abbPropDefinition, '['), ']'), '([ ]*\|[ ]*)|(^[ ]+)|([ ]+$)') return (index-of($validTokens, replace($pValue, '\-', '~')) > 0) else if ($abbPropDefinition != '') then replace($pValue, '\-', '~') = $abbPropDefinition else true()))))))"/>
	<param name="EIRA-015" value="let $propValue := normalize-space(string(./a:value)) return (let $propId := string(./@propertyDefinitionRef) return (let $propertyName := string(/a:model/a:propertyDefinitions/a:propertyDefinition[string(./@identifier) = $propId]/a:name) return (not($propertyName = 'eira:reusability' and $propValue = 'Reusable') or (let $reuseStatusProperty := (../a:property[(let $propId := string(./@propertyDefinitionRef) return (exists(/a:model/a:propertyDefinitions/a:propertyDefinition[string(./@identifier) = $propId and string(./a:name) = 'eira:reuse_status'])))]) return (exactly-one($reuseStatusProperty) and normalize-space(string($reuseStatusProperty/a:value)) != '')))))"/>
	<param name="EIRA-016" value="let $propValue := normalize-space(string(./a:value)) return (let $propId := string(./@propertyDefinitionRef) return (let $propertyName := string(/a:model/a:propertyDefinitions/a:propertyDefinition[string(./@identifier) = $propId]/a:name) return (not($propertyName = 'eira:reusability' and $propValue = 'Not reusable') or (let $reuseStatusProperty := (../a:property[(let $propId := string(./@propertyDefinitionRef) return (exists(/a:model/a:propertyDefinitions/a:propertyDefinition[string(./@identifier) = $propId and string(./a:name) = 'eira:reuse_status'])))]) return (not(exists($reuseStatusProperty)) or (exactly-one($reuseStatusProperty) and normalize-space(string($reuseStatusProperty/a:value)) = ''))))))"/>
	<param name="EIRA-017" value="let $pElement := (./../..) return (let $pIdentifier := string(@propertyDefinitionRef) return (let $propertyName := string(/a:model/a:propertyDefinitions/a:propertyDefinition[string(./@identifier) = $pIdentifier]/a:name) return (let $abbName := normalize-space(substring-before(normalize-space(substring-after(string(../../a:name), '&lt;&lt;')), '&gt;&gt;')) return (let $abbPropDefinition := (replace(string(document('eira/EIRA.xml')/a:model/a:elements/a:element[string(./a:name) = $abbName]/a:properties/a:property[(let $abbPropId := string(./@propertyDefinitionRef) return (exists(document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition[string(./@identifier) = $abbPropId and string(./a:name) = $propertyName])))]/a:value), '\-', '~')) return (if (matches($abbPropDefinition, '\[(([\w\d\s\|]+)|([\w\d\s]+))\]\*')) then true() else count($pElement/a:properties/a:property[string(./@propertyDefinitionRef) = $pIdentifier]) = 1)))))"/>

	<!-- Parameters -->
	<param name="SBBName" value="normalize-space(substring-after(string(a:name), '&gt;&gt;'))"/>
	<param name="SBBDeclaredABBName" value="normalize-space(substring-before(normalize-space(substring-after(string(a:name), '&lt;&lt;')), '&gt;&gt;'))"/>
	<param name="ElementType" value="string(@xsi:type)"/>
	<param name="EIRAElementType" value="let $elementName := string(a:name) return string(document('eira/EIRA.xml')/a:model/a:elements/a:element[a:name = $elementName]/@xsi:type)"/>
	<param name="SBBEIRAElementType" value="let $elementName := normalize-space(substring-before(normalize-space(substring-after(string(a:name), '&lt;&lt;')), '&gt;&gt;')) return string(document('eira/EIRA.xml')/a:model/a:elements/a:element[a:name = $elementName]/@xsi:type)"/>
	<param name="MissingSBBAttributeNames" value="let $sbbProperties := a:properties return (let $sbbPropertyDefinitions := /a:model/a:propertyDefinitions return (let $abbName := normalize-space(substring-before(normalize-space(substring-after(string(./a:name), '&lt;&lt;')), '&gt;&gt;')) return (document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition[not(string(./a:name) = 'ID' or string(./a:name) = 'eira:ABB_Status' or string(./a:name) = 'eira:synonym' or string(./a:name) = 'eira:unit_in_DG' or string(./a:name) = 'dct:references' or string(./a:name) = 'eira:reuse_status' or string(./a:name) = 'eira:specific_policy_issue' or string(./a:name) = 'eira:operational_date' or string(./a:name) = 'eira:iop_score_governance' or string(./a:name) = 'eira:iop_score_h2m' or string(./a:name) = 'eira:iop_score_m2m' or string(./a:name) = 'eira:iop_score_overall' or string(./a:name) = 'eira:iop_score_sw_architecture' or string(./a:name) = 'dct:description') and (let $propId := string(./@identifier) return (let $propName := string(./a:name) return (exists(document('eira/EIRA.xml')/a:model/a:elements/a:element[string(./a:name) = $abbName]/a:properties/a:property[string(./@propertyDefinitionRef) = $propId and not(exists($sbbPropertyDefinitions/a:propertyDefinition[(let $modelPropId := string(./@identifier) return exists($sbbProperties/a:property[string(./@propertyDefinitionRef) = $modelPropId and normalize-space(string(./a:value)) != ''])) and string(./a:name) = $propName]))]))))])))/a:name/string(.)"/>
	<param name="MissingModelAttributeNames" value="let $modelProperties := a:properties return (let $modelPropertyDefinitions := /a:model/a:propertyDefinitions return (document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition[not(string(./a:name) = 'ID' or string(./a:name) = 'dct:description' or string(./a:name) = 'eira:iop_score_governance' or string(./a:name) = 'eira:iop_score_h2m' or string(./a:name) = 'eira:iop_score_m2m' or string(./a:name) = 'eira:iop_score_overall' or string(./a:name) = 'eira:iop_score_sw_architecture' or string(./a:name) = 'dcat:landingPage') and (let $propId := string(./@identifier) return (let $propName := string(./a:name) return (exists(document('eira/EIRA.xml')/a:model/a:properties/a:property[string(./@propertyDefinitionRef) = $propId and not(exists($modelPropertyDefinitions/a:propertyDefinition[(let $modelPropId := string(./@identifier) return exists($modelProperties/a:property[string(./@propertyDefinitionRef) = $modelPropId and normalize-space(string(./a:value)) != ''])) and string(./a:name) = $propName]))]))))]))/a:name/string(.)"/>
	<param name="SBBPropertyValue" value="string(a:value)"/>
	<param name="SBBPropertySBBName" value="normalize-space(substring-after(string(../../a:name), '&gt;&gt;'))"/>
	<param name="SBBPropertyDeclaredABBName" value="normalize-space(substring-before(normalize-space(substring-after(string(../../a:name), '&lt;&lt;')), '&gt;&gt;'))"/>
	<param name="SBBPropertyName" value="let $propId := string(./@propertyDefinitionRef) return (string(/a:model/a:propertyDefinitions/a:propertyDefinition[string(./@identifier) = $propId]/a:name))"/>
	<param name="ABBExpectedPropertyValue" value="let $pIdentifier := string(@propertyDefinitionRef) return (let $propertyName := string(/a:model/a:propertyDefinitions/a:propertyDefinition[string(./@identifier) = $pIdentifier]/a:name) return (let $abbName := normalize-space(substring-before(normalize-space(substring-after(string(../../a:name), '&lt;&lt;')), '&gt;&gt;')) return (string(document('eira/EIRA.xml')/a:model/a:elements/a:element[string(./a:name) = $abbName]/a:properties/a:property[(let $abbPropId := string(./@propertyDefinitionRef) return (exists(document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition[string(./@identifier) = $abbPropId and string(./a:name) = $propertyName])))]/a:value))))"/>

	<!-- Contexts -->
	<param name="Model" value="/a:model"/>
	<param name="SolutionBuildingBlock" value="/a:model/a:elements/a:element[matches(string(a:name), '&lt;&lt;[ \t]*.+[ \t]*&gt;&gt;.+')]"/>
	<param name="ArchitectureBuildingBlock" value="/a:model/a:elements/a:element[let $name := string(a:name) return exists(document('eira/EIRA.xml')/a:model/a:elements/a:element[a:properties/a:property[@propertyDefinitionRef = string(document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition[a:name = 'dct:type']/@identifier)] and string(a:name) = $name])]"/>
	<param name="SBBPropertyDefinedInEIRA" value="/a:model/a:elements/a:element[matches(string(a:name), '&lt;&lt;[ \t]*.+[ \t]*&gt;&gt;.+')]/a:properties/a:property[(let $propId := string(./@propertyDefinitionRef) return (let $propertyName := string(/a:model/a:propertyDefinitions/a:propertyDefinition[string(./@identifier) = $propId]/a:name) return (let $abbName := normalize-space(substring-before(normalize-space(substring-after(string(./../../a:name), '&lt;&lt;')), '&gt;&gt;')) return (exists(document('eira/EIRA.xml')/a:model/a:propertyDefinitions/a:propertyDefinition[string(./a:name) = $propertyName and (let $abbPropId := string(./@identifier) return (exists(document('eira/EIRA.xml')/a:model/a:elements/a:element[string(./a:name) = $abbName]/a:properties/a:property[string(./@propertyDefinitionRef) = $abbPropId])))])))))]"/>
</pattern>
